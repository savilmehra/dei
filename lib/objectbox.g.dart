// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'features/products_showcase/models/fielSpinResponse.dart';



export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3737999880439799885),
      name: 'FileSpinFiles',
      lastPropertyId: const IdUid(7, 1778608931448153583),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7602923744987290993),
            name: 'ids',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3337484022396743916),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3430659839469253394),
            name: 'size',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1562543606458148077),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const IdUid(1, 6946591246515141428)),
        ModelProperty(
            id: const IdUid(5, 4604758623869600085),
            name: 'checksum',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4365271686253380443),
            name: 'contentType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1778608931448153583),
            name: 'thumbnail',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 3737999880439799885),
      lastIndexId: const IdUid(1, 6946591246515141428),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    FileSpinFiles: EntityDefinition<FileSpinFiles>(
        model: _entities[0],
        toOneRelations: (FileSpinFiles object) => [],
        toManyRelations: (FileSpinFiles object) => {},
        getId: (FileSpinFiles object) => object.ids,
        setId: (FileSpinFiles object, int id) {
          object.ids = id;
        },
        objectToFB: (FileSpinFiles object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final checksumOffset = object.checksum == null
              ? null
              : fbb.writeString(object.checksum!);
          final contentTypeOffset = object.contentType == null
              ? null
              : fbb.writeString(object.contentType!);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeString(object.thumbnail!);
          fbb.startTable(8);
          fbb.addInt64(0, object.ids ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.size);
          fbb.addOffset(3, idOffset);
          fbb.addOffset(4, checksumOffset);
          fbb.addOffset(5, contentTypeOffset);
          fbb.addOffset(6, thumbnailOffset);
          fbb.finish(fbb.endTable());
          return object.ids ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FileSpinFiles(
              ids: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              size: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              checksum: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              contentType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              thumbnail: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [FileSpinFiles] entity fields to define ObjectBox queries.
class FileSpinFiles_ {
  /// see [FileSpinFiles.ids]
  static final ids =
      QueryIntegerProperty<FileSpinFiles>(_entities[0].properties[0]);

  /// see [FileSpinFiles.name]
  static final name =
      QueryStringProperty<FileSpinFiles>(_entities[0].properties[1]);

  /// see [FileSpinFiles.size]
  static final size =
      QueryIntegerProperty<FileSpinFiles>(_entities[0].properties[2]);

  /// see [FileSpinFiles.id]
  static final id =
      QueryStringProperty<FileSpinFiles>(_entities[0].properties[3]);

  /// see [FileSpinFiles.checksum]
  static final checksum =
      QueryStringProperty<FileSpinFiles>(_entities[0].properties[4]);

  /// see [FileSpinFiles.contentType]
  static final contentType =
      QueryStringProperty<FileSpinFiles>(_entities[0].properties[5]);

  /// see [FileSpinFiles.thumbnail]
  static final thumbnail =
      QueryStringProperty<FileSpinFiles>(_entities[0].properties[6]);
}
